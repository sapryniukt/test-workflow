name: Auto Sync Dev

on:
  push:
    branches: [master]
  schedule:
    - cron: "0 */6 * * *" # Every 6 hours

jobs:
  sync-dev:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SYNC_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check sync status
        id: check
        run: |
          git fetch origin master dev

          # Check if dev is behind
          BEHIND=$(git rev-list --count origin/dev..origin/master)
          AHEAD=$(git rev-list --count origin/master..origin/dev)

          echo "behind_count=$BEHIND" >> $GITHUB_OUTPUT
          echo "ahead_count=$AHEAD" >> $GITHUB_OUTPUT
          echo "needs_sync=$([[ $BEHIND -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Test merge compatibility
        if: steps.check.outputs.needs_sync == 'true'
        id: test-merge
        run: |
          git fetch origin master dev

          # Create temporary branch for testing
          git checkout -b temp-test-merge origin/dev

          # Test merge without committing
          if git merge --no-commit --no-ff origin/master; then
            echo "merge_possible=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Merge test successful - no conflicts detected"
            
            # Get conflicted files (should be empty)
            CONFLICTED_FILES=$(git diff --name-only --diff-filter=U || echo "")
            echo "conflicted_files=" >> $GITHUB_OUTPUT
            
            # Clean up test merge
            git merge --abort 2>/dev/null || true
          else
            echo "merge_possible=false" >> $GITHUB_OUTPUT
            echo "‚ùå Merge test failed - conflicts detected"
            
            # Get conflicted files
            CONFLICTED_FILES=$(git diff --name-only --diff-filter=U || echo "unknown")
            echo "conflicted_files<<EOF" >> $GITHUB_OUTPUT
            echo "$CONFLICTED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Clean up test merge
            git merge --abort 2>/dev/null || true
          fi

          # Clean up temp branch
          git checkout master
          git branch -D temp-test-merge

      - name: Check for existing sync PR
        if: steps.check.outputs.needs_sync == 'true'
        id: existing-pr
        run: |
          # Check if there's already an open sync PR
          EXISTING_PR=$(gh pr list --base dev --label "auto-sync" --state open --json number,headRefName --jq '.[0] // empty')

          if [[ -n "$EXISTING_PR" ]]; then
            PR_NUMBER=$(echo "$EXISTING_PR" | jq -r '.number')
            PR_BRANCH=$(echo "$EXISTING_PR" | jq -r '.headRefName')
            echo "existing_pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "existing_pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
            echo "has_existing_pr=true" >> $GITHUB_OUTPUT
          else
            echo "has_existing_pr=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.SYNC_TOKEN }}

      - name: Update existing sync PR
        if: steps.check.outputs.needs_sync == 'true' && steps.existing-pr.outputs.has_existing_pr == 'true'
        run: |
          # Fetch latest changes
          git fetch origin master dev

          PR_BRANCH="${{ steps.existing-pr.outputs.existing_pr_branch }}"
          PR_NUMBER="${{ steps.existing-pr.outputs.existing_pr_number }}"

          echo "üîÑ Updating existing sync PR #$PR_NUMBER on branch $PR_BRANCH"

          # Checkout existing sync branch
          git fetch origin $PR_BRANCH
          git checkout $PR_BRANCH

          # Check if there are new commits to sync
          CURRENT_BEHIND=$(git rev-list --count HEAD..origin/master)

          if [[ $CURRENT_BEHIND -gt 0 ]]; then
            echo "üì¶ Found $CURRENT_BEHIND new commits to sync"
            
            # Check if merge is possible based on our test
            if [[ "${{ steps.test-merge.outputs.merge_possible }}" == "true" ]]; then
              # Successful merge - update the branch
              git merge origin/master --no-edit
              git push origin $PR_BRANCH
              
              # Update PR description
              gh pr edit $PR_NUMBER \
                --title "üîÑ Auto-sync: Master ‚Üí Dev (${{ steps.check.outputs.behind_count }} commits) [Updated]" \
                --body "$(cat << EOF
          ## Automatic Sync: Master ‚Üí Dev [UPDATED]

          ### Summary
          - **${{ steps.check.outputs.behind_count }}** commits behind master
          - **${{ steps.check.outputs.ahead_count }}** commits ahead of master  
          - **No merge conflicts detected** ‚úÖ
          - **PR updated with latest changes** üîÑ

          ### Recent Master Commits
          $(git log origin/dev..origin/master --oneline --max-count=10)

          ### Actions
          - [ ] Review changes
          - [ ] Approve and merge

          *Auto-updated on $(date)*
          EOF
          )"

              # Add comment about the update
              gh pr comment $PR_NUMBER --body "üîÑ **PR automatically updated** with $CURRENT_BEHIND new commits from master. Ready for review!"
              
            else
              # Merge conflicts detected - update PR with conflict info
              gh pr edit $PR_NUMBER \
                --title "‚ö†Ô∏è Sync PR Needs Manual Update: Master ‚Üí Dev (Conflicts)" \
                --add-label "conflicts,needs-attention"
              
              gh pr comment $PR_NUMBER --body "$(cat << EOF
          ‚ö†Ô∏è **Merge conflicts detected** while updating this PR with new master commits.

          ### Conflicted Files
          \`\`\`
          ${{ steps.test-merge.outputs.conflicted_files }}
          \`\`\`

          ### Manual Update Required
          1. Checkout this branch locally
          2. Merge master and resolve conflicts  
          3. Push the resolved changes

          \`\`\`bash
          git fetch origin
          git checkout $PR_BRANCH
          git merge origin/master
          # Resolve conflicts in your editor
          git add .
          git commit
          git push origin $PR_BRANCH
          \`\`\`
          EOF
          )"
            fi
          else
            echo "‚úÖ Existing PR is already up to date"
            gh pr comment $PR_NUMBER --body "‚úÖ PR is up to date with latest master changes."
          fi
        env:
          GH_TOKEN: ${{ secrets.SYNC_TOKEN }}

      - name: Create new successful sync PR
        if: steps.check.outputs.needs_sync == 'true' && steps.existing-pr.outputs.has_existing_pr == 'false' && steps.test-merge.outputs.merge_possible == 'true'
        run: |
          # Fetch latest changes
          git fetch origin master dev

          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH="auto-sync/master-to-dev-$TIMESTAMP"

          # Create sync branch from latest dev
          git checkout -b $BRANCH origin/dev

          # Merge master (we know this will succeed from our test)
          git merge origin/master --no-edit

          # Push the merged branch
          git push origin $BRANCH

          # Create successful sync PR
          gh pr create \
            --title "üîÑ Auto-sync: Master ‚Üí Dev (${{ steps.check.outputs.behind_count }} commits)" \
            --body "$(cat << EOF
          ## Automatic Sync: Master ‚Üí Dev

          ### Summary
          - **${{ steps.check.outputs.behind_count }}** commits behind master
          - **${{ steps.check.outputs.ahead_count }}** commits ahead of master
          - **No merge conflicts detected** ‚úÖ

          ### Recent Master Commits
          $(git log origin/dev..origin/master --oneline --max-count=10)

          ### Actions
          - [ ] Review changes
          - [ ] Approve and merge

          *Auto-generated on $(date)*
          EOF
          )" \
            --base dev \
            --head $BRANCH \
            --label "auto-sync,maintenance"
        env:
          GH_TOKEN: ${{ secrets.SYNC_TOKEN }}

      - name: Create conflict notification PR
        if: steps.check.outputs.needs_sync == 'true' && steps.existing-pr.outputs.has_existing_pr == 'false' && steps.test-merge.outputs.merge_possible == 'false'
        run: |
          # Fetch latest changes
          git fetch origin master dev

          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH="sync-conflict/master-to-dev-$TIMESTAMP"

          # Create branch from dev (clean, no conflicts)
          git checkout -b $BRANCH origin/dev
          git push origin $BRANCH

          # Create conflict notification PR
          gh pr create \
            --title "‚ö†Ô∏è Manual Sync Required: Master ‚Üí Dev (Conflicts Detected)" \
            --body "$(cat << EOF
          ## Manual Sync Required - Merge Conflicts Detected

          **Automatic merge failed** during compatibility test. Manual resolution required.

          ### Summary
          - **${{ steps.check.outputs.behind_count }}** commits behind master
          - **Merge conflicts detected in files below**

          ### Conflicted Files
          \`\`\`
          ${{ steps.test-merge.outputs.conflicted_files }}
          \`\`\`

          ### Recent Master Commits (causing conflicts)
          $(git log origin/dev..origin/master --oneline --max-count=10)

          ### Manual Resolution Steps
          1. Checkout this branch locally
          2. Merge master and resolve conflicts
          3. Push the resolved merge

          \`\`\`bash
          git fetch origin
          git checkout $BRANCH
          git merge origin/master
          # Resolve conflicts in your editor
          git add .
          git commit -m "Resolve merge conflicts for master ‚Üí dev sync"
          git push origin $BRANCH
          \`\`\`

          ### After Resolution
          - [ ] Conflicts resolved and tested
          - [ ] Changes reviewed  
          - [ ] Ready to merge

          *Auto-generated on $(date)*
          EOF
          )" \
            --base dev \
            --head $BRANCH \
            --label "auto-sync,conflicts,needs-attention"
        env:
          GH_TOKEN: ${{ secrets.SYNC_TOKEN }}
